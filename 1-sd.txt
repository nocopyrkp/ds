ServerIntf.java

import java.rmi.*;

public interface ServerIntf extends Remote {
    public int addition(int a, int b) throws RemoteException;
    public int substraction(int a, int b) throws RemoteException;
    public int division(int a, int b) throws RemoteException;
    public int multiplication(int a, int b) throws RemoteException;
    public int square(int a) throws RemoteException;
    public int squareroot(int a) throws RemoteException;
    public void palindrome(String str) throws RemoteException;
    public void isequalstring(String str1, String str2) throws RemoteException;
}


ServerImpl.java

import java.rmi.*;
import java.rmi.server.*;

public class ServerImpl extends UnicastRemoteObject implements ServerIntf {

    public ServerImpl() throws RemoteException {}

    public int addition(int a, int b) throws RemoteException {
        return a + b;
    }

    public int substraction(int a, int b) throws RemoteException {
        return a - b;
    }

    public int division(int a, int b) throws RemoteException {
        return a / b;
    }

    public int multiplication(int a, int b) throws RemoteException {
        return a * b;
    }

    public int square(int a) throws RemoteException {
        return a * a;
    }

    public int squareroot(int a) throws RemoteException {
        return (int) Math.sqrt(a);
    }

    public void palindrome(String str) throws RemoteException {
        StringBuilder sb = new StringBuilder(str);
        if (str.equals(sb.reverse().toString()))
            System.out.println("String is Palindrome!");
        else
            System.out.println("String is Not Palindrome!");
    }

    public void isequalstring(String str1, String str2) throws RemoteException {
        if (str1.equals(str2))
            System.out.println("String is equal!");
        else
            System.out.println("String is not equal!");
    }
}


Server.java

import java.rmi.*;

public class Server {
    public static void main(String[] args) {
        try {
            ServerImpl serverimpl = new ServerImpl();
            Naming.rebind("Server", serverimpl); // Bind to RMI Registry
            System.out.println("Server started!");
        } catch (Exception e) {
            System.out.println("Exception at server: " + e.getMessage());
        }
    }
}



Client.java

import java.rmi.*;
import java.util.Scanner;

public class Client {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        try {
            String url = "rmi://localhost/Server";  // Connect to the RMI Registry
            ServerIntf serverIntf = (ServerIntf) Naming.lookup(url);

            System.out.println("Enter num1: ");
            int a = sc.nextInt();
            System.out.println("Enter num2: ");
            int b = sc.nextInt();

            System.out.println("Add: " + serverIntf.addition(a, b));
            System.out.println("Sub: " + serverIntf.substraction(a, b));
            System.out.println("Mul: " + serverIntf.multiplication(a, b));
            System.out.println("Div: " + serverIntf.division(a, b));
            System.out.println("Square: " + serverIntf.square(a));
            System.out.println("Square Root: " + serverIntf.squareroot(b));
        } catch (Exception e) {
            System.out.println("Exception at Client: " + e);
        }
        sc.close();
    }
}


javac *.java
rmiregistry
java Server
java Client
