import java.util.*;
import java.util.concurrent.*;

public class TokenRing {
    static final int NUM_PROCESSES = 5;
    static List<Process> processes = new ArrayList<>();
    static Semaphore mutex = new Semaphore(1);
    static int tokenHolder = 0;
    static Random random = new Random();

    public static void main(String[] args) {
        for (int i = 0; i < NUM_PROCESSES; i++) {
            Process p = new Process(i);
            processes.add(p);
            new Thread(p).start();
        }
    }

    static class Process implements Runnable {
        int id;

        Process(int id) {
            this.id = id;
        }

        public void run() {
            for (int i = 0; i < 3; i++) { // only 3 cycles
                try {
                    Thread.sleep(random.nextInt(1000));
                    requestToken();
                    enterCriticalSection();
                    releaseToken();
                    Thread.sleep(random.nextInt(1000));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            System.out.println("Process " + id + " finished all rounds.");
        }

        void requestToken() throws InterruptedException {
            while (true) {
                mutex.acquire();
                if (tokenHolder == id) {
                    System.out.println("Process " + id + " got the token.");
                    mutex.release();
                    break;
                }
                mutex.release();
                Thread.sleep(100);
            }
        }

        void enterCriticalSection() throws InterruptedException {
            System.out.println("Process " + id + " is in the critical section.");
            Thread.sleep(random.nextInt(500));
        }

        void releaseToken() throws InterruptedException {
            mutex.acquire();
            tokenHolder = (tokenHolder + 1) % NUM_PROCESSES;
            System.out.println("Process " + id + " released token to Process " + tokenHolder);
            mutex.release();
        }
    }
}



javac TokenRing.java
java TokenRing
